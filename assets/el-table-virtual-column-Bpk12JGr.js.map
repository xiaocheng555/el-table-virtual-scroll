{"version":3,"file":"el-table-virtual-column-Bpk12JGr.js","sources":["../../../src/el-table-virtual-column-formatter.vue","../../../src/el-table-virtual-column.vue?vue&type=template&lang.js","../../../src/el-table-virtual-column.vue"],"sourcesContent":["<script>\n// 此组件仅用于显示VNode\nexport default {\n  name: 'el-table-virtual-column-formatter',\n  props: {\n    vNode: {\n      type: Object\n    }\n  },\n  render () {\n    return this.vNode\n  }\n}\n</script>\n","\n<el-table-column\n  v-bind=\"$attrs\"\n  v-on=\"$listeners\"\n  :type=\"getColumnType()\"\n  :class-name=\"getClassName\">\n  <!-- 列头部 -->\n  <template slot=\"header\" slot-scope=\"scope\">\n    <slot v-if=\"$scopedSlots['header']\" name=\"header\" v-bind=\"scope\"></slot>\n    <template v-else>\n      <!-- 多选类型-全选 -->\n      <el-checkbox\n        v-if=\"$attrs.type === 'selection'\"\n        :value=\"isCheckedAll\"\n        :indeterminate=\"isCheckedImn\"\n        @change=\"onCheckAllRows\">\n      </el-checkbox>\n      <template v-else>\n        {{scope.column.label}}\n      </template>\n    </template>\n  </template>\n  <!-- 列嵌套 -->\n  <template v-if=\"isNested\">\n    <slot></slot>\n  </template>\n  <!-- 列内容 -->\n  <template slot-scope=\"scope\">\n    <!-- v-tree类型 -->\n    <template v-if=\"isTree\">\n      <span class=\"el-table__indent\" :style=\"{ paddingLeft: `${getTreeState(scope.row).level * indent}px` }\"></span>\n      <!-- treeNodeKey 用来更新视图的 -->\n      <div\n        v-if=\"canExpand(scope.row) && treeNodeKey\"\n        class=\"el-table__expand-icon\"\n        :class=\"getTreeState(scope.row).expanded ? 'el-table__expand-icon--expanded' : ''\"\n        @click=\"onTreeNodeExpand(scope.row)\">\n        <i class=\"el-icon-loading\" v-if=\"getTreeState(scope.row).loading\"></i>\n        <i class=\"el-icon-arrow-right\" v-else></i>\n      </div>\n      <span v-else class=\"el-table__placeholder\"></span>\n    </template>\n    <slot v-if=\"$scopedSlots['default']\" v-bind=\"setScope(scope)\"></slot>\n    <template v-else>\n      <!-- 多选类型 -->\n      <el-checkbox\n        @click.native.stop\n        v-if=\"$attrs.type === 'selection'\"\n        :value=\"scope.row.$v_checked || false\"\n        :disabled=\"getDisabled(scope)\"\n        @change=\"onCheckRow(scope, !scope.row.$v_checked)\">\n      </el-checkbox>\n      <!-- 单选类型 -->\n      <el-radio\n        v-if=\"$attrs.type === 'radio'\"\n        :label=\"true\"\n        :value=\"virtualScroll.curRow === scope.row\"\n        @change=\"onRadioChange(scope.row)\">\n        <span></span>\n      </el-radio>\n      <!-- v-index类型 -->\n      <span v-else-if=\"$attrs.type === 'index'\">\n        {{ getIndex(scope) }}\n      </span>\n      <!-- 有formatter参数的情况 -->\n      <template v-else-if=\"scope.column.formatter\">\n        <!-- formatter结果为VNode的情况 -->\n        <el-table-virtual-column-formatter\n          v-if=\"isVNode(getFormatterResult(scope))\"\n          :v-node=\"getFormatterResult(scope)\"\n        />\n        <!-- formatter结果为String的情况 -->\n        <template v-else>{{ getFormatterResult(scope) }}</template>\n      </template>\n      <template v-else>\n        {{scope.row[scope.column.property]}}\n      </template>\n    </template>\n  </template>\n</el-table-column>\n","<template>\n  <el-table-column\n    v-bind=\"$attrs\"\n    v-on=\"$listeners\"\n    :type=\"getColumnType()\"\n    :class-name=\"getClassName\">\n    <!-- 列头部 -->\n    <template slot=\"header\" slot-scope=\"scope\">\n      <slot v-if=\"$scopedSlots['header']\" name=\"header\" v-bind=\"scope\"></slot>\n      <template v-else>\n        <!-- 多选类型-全选 -->\n        <el-checkbox\n          v-if=\"$attrs.type === 'selection'\"\n          :value=\"isCheckedAll\"\n          :indeterminate=\"isCheckedImn\"\n          @change=\"onCheckAllRows\">\n        </el-checkbox>\n        <template v-else>\n          {{scope.column.label}}\n        </template>\n      </template>\n    </template>\n    <!-- 列嵌套 -->\n    <template v-if=\"isNested\">\n      <slot></slot>\n    </template>\n    <!-- 列内容 -->\n    <template slot-scope=\"scope\">\n      <!-- v-tree类型 -->\n      <template v-if=\"isTree\">\n        <span class=\"el-table__indent\" :style=\"{ paddingLeft: `${getTreeState(scope.row).level * indent}px` }\"></span>\n        <!-- treeNodeKey 用来更新视图的 -->\n        <div\n          v-if=\"canExpand(scope.row) && treeNodeKey\"\n          class=\"el-table__expand-icon\"\n          :class=\"getTreeState(scope.row).expanded ? 'el-table__expand-icon--expanded' : ''\"\n          @click=\"onTreeNodeExpand(scope.row)\">\n          <i class=\"el-icon-loading\" v-if=\"getTreeState(scope.row).loading\"></i>\n          <i class=\"el-icon-arrow-right\" v-else></i>\n        </div>\n        <span v-else class=\"el-table__placeholder\"></span>\n      </template>\n      <slot v-if=\"$scopedSlots['default']\" v-bind=\"setScope(scope)\"></slot>\n      <template v-else>\n        <!-- 多选类型 -->\n        <el-checkbox\n          @click.native.stop\n          v-if=\"$attrs.type === 'selection'\"\n          :value=\"scope.row.$v_checked || false\"\n          :disabled=\"getDisabled(scope)\"\n          @change=\"onCheckRow(scope, !scope.row.$v_checked)\">\n        </el-checkbox>\n        <!-- 单选类型 -->\n        <el-radio\n          v-if=\"$attrs.type === 'radio'\"\n          :label=\"true\"\n          :value=\"virtualScroll.curRow === scope.row\"\n          @change=\"onRadioChange(scope.row)\">\n          <span></span>\n        </el-radio>\n        <!-- v-index类型 -->\n        <span v-else-if=\"$attrs.type === 'index'\">\n          {{ getIndex(scope) }}\n        </span>\n        <!-- 有formatter参数的情况 -->\n        <template v-else-if=\"scope.column.formatter\">\n          <!-- formatter结果为VNode的情况 -->\n          <el-table-virtual-column-formatter\n            v-if=\"isVNode(getFormatterResult(scope))\"\n            :v-node=\"getFormatterResult(scope)\"\n          />\n          <!-- formatter结果为String的情况 -->\n          <template v-else>{{ getFormatterResult(scope) }}</template>\n        </template>\n        <template v-else>\n          {{scope.row[scope.column.property]}}\n        </template>\n      </template>\n    </template>\n  </el-table-column>\n</template>\n\n<script>\nimport {\n  TableColumn,\n  Checkbox,\n  Radio\n} from 'element-ui'\nimport ElTableVirtualColumnFormatter from './el-table-virtual-column-formatter.vue'\n\n// 用于获取formatter结果的临时对象，不可挂载到vue实例中，否则会导致循环更新的问题\nconst formatterTempObj = {\n  scope: null, // 缓存键 当前scope参数\n  result: null // 缓存值 formatter的调用结果\n}\n\nexport default {\n  name: 'el-table-virtual-column',\n  components: {\n    ElCheckbox: Checkbox,\n    ElRadio: Radio,\n    ElTableVirtualColumnFormatter\n  },\n  inject: ['virtualScroll'],\n  props: {\n    selectable: {\n      type: Function\n    },\n    reserveSelection: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    return {\n      isCheckedAll: false, // 全选\n      isCheckedImn: false, // 控制半选样式\n      isTree: false, // 树结构\n      isNested: false, // 是否列嵌套\n      treeNodeKey: 1 // 更新树节点视图\n    }\n  },\n  computed: {\n    getClassName () {\n      const classnames = []\n      const classname = this.$attrs['class-name'] || this.$attrs.className\n      classname && classnames.push(classname)\n      this.isTree && classnames.push('el-table__row--level')\n      let vfixed = this.$attrs.vfixed\n      if (vfixed === true || vfixed === '') vfixed = 'left'\n      if (vfixed) classnames.push('virtual-column__fixed-' + vfixed)\n      return classnames.join(' ')\n    },\n    indent () {\n      return (this.virtualScroll.elTable || {}).indent || 16\n    }\n  },\n  methods: {\n    getColumnType () {\n      const { type } = this.$attrs\n      // 自定义的类型需转为空传到 el-table-column，否则会导致某些bug，如筛选按钮不亮\n      return ['index', 'selection', 'radio', 'tree'].includes(type) ? '' : type\n    },\n    // 获取多选禁用状态\n    getDisabled (scope) {\n      if (this.selectable) {\n        const index = this.getIndex(scope, false)\n        return !this.selectable(scope.row, index)\n      }\n      return false\n    },\n    // 选择表格所有行\n    onCheckAllRows (val) {\n      const { selectOnIndeterminate = true } = this.virtualScroll.elTable\n      if (selectOnIndeterminate) {\n        val = this.isCheckedImn ? true : !this.isCheckedAll\n      } else {\n        val = this.isCheckedImn ? false : !this.isCheckedAll\n      }\n      if (this.selectable) {\n        // 筛选出可选的行\n        const selectableList = []\n        const list = this.virtualScroll.getData(false)\n        list.forEach((row, index) => {\n          this.selectable(row, index) && selectableList.push(row)\n        })\n        this.virtualScroll.checkAll(val, selectableList, true)\n      } else {\n        this.virtualScroll.checkAll(val)\n      }\n\n      const selection = this.virtualScroll.getSelection()\n      this.isCheckedImn = !val && selection.length > 0\n      this.isCheckedAll = val\n    },\n    // 选择表格某行\n    onCheckRow (scope, val) {\n      const index = this.getIndex(scope, false)\n      if (this.selectable) {\n        const isSelectable = this.selectable(scope.row, index)\n        if (!isSelectable) return\n      }\n\n      this.virtualScroll.checkRow(scope.row, val, true, true)\n      this.syncCheckStatus()\n    },\n    // 是否自定义多选\n    isSelection () {\n      return this.$attrs.type === 'selection'\n    },\n    // 同步全选、半选框状态\n    syncCheckStatus () {\n      const list = this.virtualScroll.getData(false) // 筛选后的列表或原列表\n      const checkedLen = list.filter(row => row.$v_checked === true).length\n      const selection = this.virtualScroll.getSelection()\n\n      if (checkedLen && checkedLen === list.length) {\n        // 全部选中\n        this.isCheckedAll = true\n      } else if (checkedLen && this.selectable) {\n        // 可选的全部选中\n        this.isCheckedAll = list.every((row, index) => {\n          const enable = this.selectable(row, index)\n          if (!enable) return true\n          return row.$v_checked\n        })\n      } else {\n        // 没有选中\n        this.isCheckedAll = false\n      }\n      this.isCheckedImn = !this.isCheckedAll && selection.length > 0\n    },\n    // 单选\n    onRadioChange (row) {\n      this.virtualScroll.setCurrentRow(row)\n    },\n    // 获取索引值; add1 - 是否加1\n    getIndex (scope, add1 = true) {\n      const index = this.virtualScroll.start + scope.$index\n      if (typeof this.$attrs.index === 'function') {\n        return this.$attrs.index(index)\n      }\n      return index + (add1 ? 1 : 0)\n    },\n    // 设置正确索引值\n    setScope (scope) {\n      scope.$index = this.virtualScroll.start + scope.$index\n      return scope\n    },\n    // 获取树节点状态\n    getTreeState (row) {\n      return row.$v_tree || {}\n    },\n    // 是否可展开\n    canExpand (row) {\n      const { children = 'children', hasChildren = 'hasChildren' } = this.virtualScroll.treeProps || {}\n      const treeState = row.$v_tree || {}\n      return (row[children] || []).length > 0 || (row[hasChildren] && !treeState.loaded)\n    },\n    // 展开树节点\n    async onTreeNodeExpand (row) {\n      const treeState = row.$v_tree\n      if (treeState) {\n        const { treeProps } = this.virtualScroll\n        const { hasChildren = 'hasChildren' } = treeProps\n        if (treeState.loading) return\n        if (!treeState.expanded && row[hasChildren] && !treeState.loaded) {\n          await this.loadChildNodes(row)\n        } else {\n          treeState.expanded = !treeState.expanded\n          this.renderTreeNode()\n          this.virtualScroll.update()\n        }\n        this.virtualScroll.elTable.$emit('expand-change', row, treeState.expanded)\n      }\n    },\n    // 加载子节点\n    async loadChildNodes (row) {\n      return new Promise(resolve => {\n        const { treeProps } = this.virtualScroll\n        const { load } = this.virtualScroll.elTable\n        if (!load) return resolve()\n\n        const { children = 'children' } = treeProps\n        const treeState = row.$v_tree\n        treeState.loading = true\n        this.renderTreeNode()\n\n        function resolveFn (data) {\n          if (!Array.isArray(data)) {\n            throw new Error('[ElTable] data must be an array')\n          }\n\n          treeState.loading = false\n          treeState.loaded = true\n          treeState.expanded = true\n          this.renderTreeNode()\n          if (!Array.isArray(data)) {\n            resolve()\n            return\n          }\n          this.$set(row, children, data)\n          this.virtualScroll.update()\n          resolve()\n        }\n        load(row, treeState, resolveFn.bind(this))\n      })\n    },\n    // 由于$v_tree不是响应式数据，$v_tree状态的变更需要手动触发视图的更新\n    renderTreeNode () {\n      this.treeNodeKey = this.treeNodeKey === 1 ? 2 : 1\n    },\n    // 判断内容是否为VNode\n    isVNode (vNode) {\n      return this._vnode.constructor === vNode?.constructor\n    },\n    // 获取formatter结果，相同的scope使用缓存的结果，避免重复调用formatter函数\n    // 当前与formatter有关的template的写法会使同一个scope参数被formatter连续使用两次\n    // 后续的formatter调用参数都是一个全新的scope对象\n    // 因此，只需判断当前scope与上一个scope是否相同即可决定是否需要使用缓存\n    getFormatterResult (scope) {\n      if (formatterTempObj.scope === scope) {\n        // 获取缓存的formatter调用结果\n        return formatterTempObj.result\n      } else {\n        // scope不匹配，更新缓存键scope与值result\n        formatterTempObj.scope = scope\n        formatterTempObj.result = scope.column.formatter(scope.row, scope.column, scope.row[scope.column.property], scope.$index)\n        return formatterTempObj.result\n      }\n    }\n  },\n  beforeCreate () {\n    const globalComponents = this.$root.$options.components\n    // 当全局有引入ElTableColumn，就不用局部再引入了(修复Duplicate keys detected: 'el-table_1_column_1'. This may cause an update error. #63)\n    if (!globalComponents.ElTableColumn) {\n      this.$options.components.ElTableColumn = TableColumn\n    }\n  },\n  created () {\n    this.isNested = !!this.$slots.default // 是否列嵌套\n    this.virtualScroll.addColumn(this)\n\n    const { type } = this.$attrs\n    if (type === 'expand') {\n      this.virtualScroll.useExpandTable()\n    } else if (type === 'tree') {\n      this.isTree = true\n      this.virtualScroll.useCustomTree()\n    } else if (type === 'selection') {\n      this.virtualScroll.useCustomSelection()\n    }\n  },\n  beforeDestroy () {\n    this.virtualScroll.removeColumn(this)\n    // 清除formatter相关的缓存\n    formatterTempObj.scope = null\n    formatterTempObj.result = null\n  }\n}\n</script>\n\n<style lang='less'>\n.el-table-virtual-scroll {\n  .virtual-column__fixed-left,\n  .virtual-column__fixed-right {\n    position: sticky !important;\n    z-index: 2 !important;\n    background: #fff;\n  }\n  &.is-scrolling-left {\n    .is-last-column {\n      &:before {\n        box-shadow: none;\n      }\n    }\n  }\n  &.is-scrolling-right,\n  &.is-scrolling-middle {\n    .is-last-column {\n      border-right: none;\n    }\n  }\n\n  &.is-scrolling-right {\n    .is-first-column {\n      &:before {\n        box-shadow: none;\n      }\n    }\n  }\n  &.is-scrolling-left,\n  &.is-scrolling-middle {\n    .is-first-column {\n      border-left: none;\n    }\n  }\n  .is-last-column,\n  .is-first-column {\n    overflow: visible !important;\n\n    &:before {\n      content: \"\";\n      position: absolute;\n      top: 0px;\n      width: 10px;\n      bottom: -1px;\n      overflow-x: hidden;\n      overflow-y: hidden;\n      touch-action: none;\n      pointer-events: none;\n    }\n  }\n  .is-last-column {\n    &:before {\n      right: -10px;\n      box-shadow: inset 10px 0 10px -10px rgba(0, 0, 0, .12);\n    }\n  }\n  .is-first-column {\n    &:before {\n      left: -10px;\n      box-shadow: inset -10px 0 10px -10px rgba(0, 0, 0, .12);\n    }\n  }\n  &.is-scrolling-none {\n    .is-last-column,\n    .is-first-column {\n      &:before {\n        content: none;\n      }\n    }\n  }\n}\n</style>\n"],"names":["__vue2_script","render","_vm","_h","_c","scope","$event","staticRenderFns","formatterTempObj","Checkbox","Radio","ElTableVirtualColumnFormatter","classnames","classname","vfixed","type","index","val","selectOnIndeterminate","selectableList","row","selection","list","checkedLen","add1","children","hasChildren","treeState","treeProps","resolve","load","resolveFn","data","vNode","TableColumn"],"mappings":"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"}