{"version":3,"file":"js/227.ed30f881.js","mappings":"2LAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACA,EAAG,WAAW,CAACE,MAAM,CAAC,KAAO,UAAU,MAAQ,2DAA2D,YAAY,MAAMF,EAAG,iBAAiB,CAACG,IAAI,gBAAgBD,MAAM,CAAC,KAAOJ,EAAIM,KAAK,YAAY,GAAG,WAAW,MAAMC,GAAG,CAAC,OAAS,SAAAC,GAAW,OAAKR,EAAIS,UAAYD,CAArB,IAAoC,CAACN,EAAG,WAAW,CAACQ,WAAW,CAAC,CAACC,KAAK,UAAUC,QAAQ,YAAYC,MAAOb,EAAIc,QAASC,WAAW,YAAYC,YAAY,CAAC,MAAQ,QAAQZ,MAAM,CAAC,KAAOJ,EAAIS,UAAU,OAAS,QAAQ,OAAS,GAAG,UAAU,KAAK,KAAO,GAAG,KAAOT,EAAIiB,OAAO,aAAa,CAACC,SAAU,WAAYC,YAAa,gBAAgBZ,GAAG,CAAC,gBAAgBP,EAAIoB,sBAAsB,CAAClB,EAAG,kBAAkB,CAACE,MAAM,CAAC,MAAQ,KAAK,KAAO,QAAQF,EAAG,kBAAkB,CAACE,MAAM,CAAC,MAAQ,KAAK,KAAO,UAAUF,EAAG,kBAAkB,CAACE,MAAM,CAAC,MAAQ,OAAO,KAAO,OAAO,wBAAwB,OAAO,IAAI,IAAI,EACr5B,EACGiB,EAAkB,G,WC6BtB,GACAC,WAAAA,CACAC,cAAAA,EAAAA,IAEAC,KAJA,WAKA,OACAV,SAAAA,EACAR,KAAAA,GACAG,UAAAA,GAEA,EACAgB,QAAAA,CACAC,UADA,WACA,WACA,gBACA,aACAC,YAAAA,WACA,UACA,uBACA,2BACA,uBACA,aACAC,GAAAA,EACAC,MAAAA,EACAC,KAAAA,EACAC,MAAAA,EACAZ,YAAAA,KAAAA,SAAAA,KAEA,CACA,YACA,OACA,EACAa,iBApBA,WAqBA,OACA,WACA,sBACA,UACA,oBACA,mCACA,eACA,gBACA,6HACA,eACA,MAEA,+BACA,WACA,EACAf,OApCA,SAoCAgB,EAAAC,EAAAC,GAAA,WACA,6BACAR,YAAAA,WACA,oBACAQ,EAAAA,QADA,CAMA,IADA,SACA,aACAX,EAAAA,KAAAA,CACAI,GAAAA,EAAAA,QACAC,MAAAA,EACAC,KAAAA,EAAAA,mBACAC,MAAAA,EAAAA,mBACAZ,aAAAA,IAGAgB,EAAAA,EAZA,CAaA,OACA,EAEAf,oBA1DA,WA2DA,iCACA,GAEAgB,QAzEA,WA0EA,gBACA,GC1GwP,I,UCOpPC,GAAY,OACd,EACAtC,EACAsB,GACA,EACA,KACA,WACA,MAIF,EAAegB,EAAiB,O","sources":["webpack://el-table-virtual-scroll/./src/views/TreeDemo.vue","webpack://el-table-virtual-scroll/src/views/TreeDemo.vue","webpack://el-table-virtual-scroll/./src/views/TreeDemo.vue?9d72","webpack://el-table-virtual-scroll/./src/views/TreeDemo.vue?7af1"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('el-alert',{attrs:{\"type\":\"warning\",\"title\":\"树结构虚拟滚动只计算一级节点渲染的数据，如果某个一级节点下的子孙节点超级多，仍然会卡顿。（可以模拟树结构懒加载）\",\"show-icon\":\"\"}}),_c('virtual-scroll',{ref:\"virtualScroll\",attrs:{\"data\":_vm.list,\"item-size\":62,\"key-prop\":\"id\"},on:{\"change\":virtualList => (_vm.tableData = virtualList)}},[_c('el-table',{directives:[{name:\"loading\",rawName:\"v-loading\",value:(_vm.loading),expression:\"loading\"}],staticStyle:{\"width\":\"100%\"},attrs:{\"data\":_vm.tableData,\"height\":\"500px\",\"border\":\"\",\"row-key\":\"id\",\"lazy\":\"\",\"load\":_vm.onload,\"tree-props\":{children: 'children', hasChildren: 'hasChildren'}},on:{\"expand-change\":_vm.updateVirtualScroll}},[_c('el-table-column',{attrs:{\"label\":\"id\",\"prop\":\"id\"}}),_c('el-table-column',{attrs:{\"label\":\"内容\",\"prop\":\"text\"}}),_c('el-table-column',{attrs:{\"label\":\"内容省略\",\"prop\":\"text\",\"show-overflow-tooltip\":\"\"}})],1)],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div>\n    <el-alert type=\"warning\" title=\"树结构虚拟滚动只计算一级节点渲染的数据，如果某个一级节点下的子孙节点超级多，仍然会卡顿。（可以模拟树结构懒加载）\" show-icon></el-alert>\n    <virtual-scroll\n      ref=\"virtualScroll\"\n      :data=\"list\"\n      :item-size=\"62\"\n      key-prop=\"id\"\n      @change=\"virtualList => (tableData = virtualList)\">\n      <el-table\n        v-loading=\"loading\"\n        :data=\"tableData\"\n        height=\"500px\"\n        style=\"width: 100%\"\n        border\n        row-key=\"id\"\n        lazy\n        :load=\"onload\"\n        :tree-props=\"{children: 'children', hasChildren: 'hasChildren'}\"\n        @expand-change=\"updateVirtualScroll\">\n        <el-table-column label=\"id\" prop=\"id\"></el-table-column>\n        <el-table-column label=\"内容\" prop=\"text\"></el-table-column>\n        <el-table-column label=\"内容省略\" prop=\"text\" show-overflow-tooltip></el-table-column>\n      </el-table>\n    </virtual-scroll>\n  </div>\n</template>\n\n<script>\nimport VirtualScroll from 'el-table-virtual-scroll'\n\nexport default {\n  components: {\n    VirtualScroll\n  },\n  data () {\n    return {\n      loading: false,\n      list: [],\n      tableData: []\n    }\n  },\n  methods: {\n    fetchData () {\n      this.loading = true\n      this.list = []\n      setTimeout(() => {\n        this.list = []\n        for (let i = 1; i < 2000; i++) {\n          const text = this.getRandomContent()\n          const text2 = this.getRandomContent()\n          this.list.push({\n            id: i,\n            show: false,\n            text,\n            text2,\n            hasChildren: Math.random() > 0.02\n          })\n        }\n        this.loading = false\n      }, 1000)\n    },\n    getRandomContent () {\n      const content = [\n        '这是一条测试数据',\n        '君不见黄河之水天上来，奔流到海不复回。',\n        '十年生死两茫茫',\n        '寻寻觅觅，冷冷清清，凄凄惨惨戚戚。',\n        '桃花坞里桃花庵，桃花庵里桃花仙；桃花仙人种桃树，又摘桃花卖酒钱。',\n        '明月几时有，把酒问青天。',\n        '槛菊愁烟兰泣露，罗幕轻寒，',\n        '寒蝉凄切，对长亭晚，骤雨初歇。都门帐饮无绪，留恋处，兰舟催发。执手相看泪眼，竟无语凝噎。念去去，千里烟波，暮霭沉沉楚天阔。多情自古伤离别，更那堪冷落清秋节！今宵酒醒何处？杨柳岸，晓风残月。此去经年，应是良辰好景虚设。便纵有千种风情，更与何人说？',\n        '红豆生南国，春来发几枝。',\n        '黄鹂'\n      ]\n      const i = Math.floor(Math.random() * 10)\n      return content[i]\n    },\n    onload (tree, treeNode, resolve) {\n      if (!this.count) this.count = 3000\n      setTimeout(() => {\n        if (Math.random() > 0.5) {\n          resolve([])\n          return\n        }\n\n        const data = []\n        for (let i = 0; i < 10; i++) {\n          data.push({\n            id: this.count++,\n            show: false,\n            text: this.getRandomContent(),\n            text2: this.getRandomContent(),\n            hasChildren: true\n          })\n        }\n        resolve(data)\n      }, 1000)\n    },\n    // 由于树节点（已展开）突然收起时，会出现的当前渲染的表格行不能满屏情况，需要更新virtualList组件，重新计算需要渲染的数据\n    updateVirtualScroll () {\n      this.$refs.virtualScroll.update()\n    }\n  },\n  created () {\n    this.fetchData()\n  }\n}\n</script>\n\n<style lang='less' scoped>\n\n</style>\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TreeDemo.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./TreeDemo.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./TreeDemo.vue?vue&type=template&id=10a861a4&scoped=true&\"\nimport script from \"./TreeDemo.vue?vue&type=script&lang=js&\"\nexport * from \"./TreeDemo.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"10a861a4\",\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","attrs","ref","list","on","virtualList","tableData","directives","name","rawName","value","loading","expression","staticStyle","onload","children","hasChildren","updateVirtualScroll","staticRenderFns","components","VirtualScroll","data","methods","fetchData","setTimeout","id","show","text","text2","getRandomContent","tree","treeNode","resolve","created","component"],"sourceRoot":""}